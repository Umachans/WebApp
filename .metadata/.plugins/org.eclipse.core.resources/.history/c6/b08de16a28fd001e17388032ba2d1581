package com.example.demo.authentication;

import java.time.LocalDateTime;

import org.springframework.context.event.EventListener;
import org.springframework.security.authentication.event.AuthenticationFailureBadCredentialsEvent;
import org.springframework.security.authentication.event.AuthenticationSuccessEvent;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Component;

import com.example.demo.repository.UserInfoRepository;

import lombok.RequiredArgsConstructor;


/**
 * ユーザー情報生成
 */
@Component
@RequiredArgsConstructor
public class UserDetailsServiceImp implements UserDetailsService {
	
	
	private static final long LOCKING_TIME = 1;
    /*アカウントロック*/
	private static final int LOCLING_BORDER_COUNT = 3;
	
	/*ユーザー情報テーブルRepository*/
	private final UserInfoRepository repository ;
	
	
	
	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException{
		var userInfo=repository.findById(username)
				.orElseThrow(()-> new UsernameNotFoundException(username));
		
		var accountLockedTime= userInfo.getAccountLockedTime();
		var isAccountLocked=accountLockedTime != null
				&& accountLockedTime.plusHours(LOCKING_TIME).isAfter(LocalDateTime.now());//アカウントロック時間
				
		return User.withUsername(userInfo.getLoginId())
				.password(userInfo.getPassword())
				.roles("USER")
				.disabled(userInfo.isDisabled())
				.accountLocked(isAccountLocked)
				//.accountExpried(ture)
				//.credentialsExpired(true)
				.build();
	}
	/**
	 * 認証失敗時にログイン失敗回数を加算、ロック日時を更新する
	 * @param event イベント情報
	 */
	@EventListener
	public void handle(AuthenticationFailureBadCredentialsEvent event) {
		var loginId=event.getAuthentication().getName();
		repository.findById(loginId).ifPresent(userInfo ->{
			repository.save(userInfo.incrementLoginFailureCount());
			
			var isReachFailureCount=userInfo.getLoginFailureCount()==LOCLING_BORDER_COUNT;
			if(isReachFailureCount) {
				repository.save(userInfo.updateAccountLocked());
			}
		});
	}
	
	@EventListener
	public void handle(AuthenticationSuccessEvent event) {
		var loginId=event.getAuthentication().getName();
		repository.findById(loginId).ifPresent(userInfo ->{
			repository.save(userInfo.resetLoginFailureInfo());
		});
	}
	
	

}
